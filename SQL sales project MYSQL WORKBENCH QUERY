create database sales;
use sales;
create table Customers (customer_id INT primary key , first_name VARCHAR(50) , last_name VARCHAR(50) , email VARCHAR(50), phone_nunmber VARCHAR(50)
, address text , city VARCHAR(50), state VARCHAR(50) , zip_code varchar(50), join_date date );
create table products ( product_id int , product_name VARCHAR(100) , category VARCHAR(100) , price decimal (10,2) , stock_quantity int,
supplier_id int );
CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    sale_date DATE,
    total_amount DECIMAL(10, 2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
CREATE TABLE Sales_Items  (sale_item_id	INT,sale_id	INT, product_id	INT,quantity	INT,price_at_sale	DECIMAL(10, 2));
create table Suppliers ( supplier_id	INT primary key , supplier_name	VARCHAR(100) , contact_name	VARCHAR(100), phone_number	VARCHAR(20),
email	VARCHAR(100), address	TEXT,city	VARCHAR(50),state	VARCHAR(50),zip_code	VARCHAR(10));
CREATE TABLE Inventory (
    inventory_id INT PRIMARY KEY,
    product_id INT,
    quantity INT,
    last_updated DATE);
INSERT INTO customers (customer_id, first_name, last_name, email, phone_nunmber, address, city, state, zip_code, join_date)
VALUES 
(1, 'John', 'Doe', 'johndoe@example.com', '123-456-7890', '123 Main St', 'New York', 'NY', '10001', '2023-01-10'),
(2, 'Jane', 'Smith', 'janesmith@example.com', '987-654-3210', '456 Elm St', 'Los Angeles', 'CA', '90001', '2023-02-14'),
(3, 'Alice', 'Johnson', 'alicej@example.com', '555-555-5555', '789 Oak St', 'Chicago', 'IL', '60601', '2023-03-05'),
(4, 'Bob', 'Brown', 'bobb@example.com', '444-444-4444', '321 Pine St', 'Houston', 'TX', '77001', '2023-04-20');

INSERT INTO products (product_id, product_name, category, price, stock_quantity, supplier_id)
VALUES 
(1, 'Laptop', 'Electronics', 999.99, 50, 1),
(2, 'Smartphone', 'Electronics', 699.99, 100, 2),
(3, 'Desk Chair', 'Furniture', 89.99, 200, 3),
(4, 'Headphones', 'Electronics', 199.99, 150, 1);

INSERT INTO suppliers (supplier_id, supplier_name, contact_name, phone_number, email, address, city, state, zip_code)
VALUES 
(1, 'TechSupply Co.', 'Michael White', '222-333-4444', 'michael@techsupply.com', '987 Tech Ave', 'San Francisco', 'CA', '94105'),
(2, 'GadgetsRUs', 'Sara Black', '111-222-3333', 'sara@gadgetsrus.com', '654 Gadget Blvd', 'Austin', 'TX', '73301'),
(3, 'OfficeFurnishings', 'Tom Green', '888-999-0000', 'tom@officefurnishings.com', '321 Office St', 'Dallas', 'TX', '75201');

INSERT INTO sales (sale_id, sale_date, customer_id, total_amount)
VALUES 
(1, '2023-05-01', 1, 1299.98),
(2, '2023-05-02', 2, 89.99),
(3, '2023-05-03', 3, 1199.98),
(4, '2023-05-04', 4, 999.99);

INSERT INTO sales_items (sale_item_id, sale_id, product_id, quantity, price_at_sale)
VALUES 
(1, 1, 1, 1, 999.99),
(2, 1, 4, 1, 199.99),
(3, 2, 3, 1, 89.99),
(4, 3, 2, 2, 699.99),
(5, 4, 1, 1, 999.99);

INSERT INTO inventory (inventory_id, product_id, quantity, last_updated)
VALUES 
(1, 1, 49, '2023-05-01'),
(2, 2, 98, '2023-05-03'),
(3, 3, 199, '2023-05-02'),
(4, 4, 149, '2023-05-01');

-- What is the total revenue generated by each product?-- 
SELECT p.product_name, SUM(si.quantity * si.price_at_sale) AS total_revenue
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_revenue DESC;

-- Who are the top 3 customers by total spending?
SELECT c.first_name, c.last_name, SUM(s.total_amount) AS total_spend
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_id
ORDER BY total_spend DESC
LIMIT 3;

-- What is the average order value (AOV) across all sales?
SELECT AVG(total_amount) AS average_order_value
FROM sales;

-- How many units of each product have been sold?
SELECT p.product_name, SUM(si.quantity) AS units_sold
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.product_name
ORDER BY units_sold DESC;

-- What is the most popular product category?
SELECT p.category, SUM(si.quantity) AS units_sold
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.category
ORDER BY units_sold DESC;

-- What is the total revenue generated in each city?
SELECT c.city, SUM(s.total_amount) AS total_revenue
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.city
ORDER BY total_revenue DESC;

-- Which supplier provides the most products?
SELECT sp.supplier_name, COUNT(p.product_id) AS products_supplied
FROM suppliers sp
JOIN products p ON sp.supplier_id = p.supplier_id
GROUP BY sp.supplier_name
ORDER BY products_supplied DESC;

-- What is the inventory level of each product after all sales?
SELECT p.product_name, i.quantity AS current_stock
FROM inventory i
JOIN products p ON i.product_id = p.product_id;

 -- What is the percentage contribution of each product to the total sales revenue?
SELECT p.product_name, 
       SUM(si.quantity * si.price_at_sale) / (SELECT SUM(total_amount) FROM sales) * 100 AS revenue_percentage
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.product_name
ORDER BY revenue_percentage DESC;

-- On which date was the highest revenue generated?
SELECT sale_date, SUM(total_amount) AS daily_revenue
FROM sales
GROUP BY sale_date
ORDER BY daily_revenue DESC
LIMIT 1;

-- How many customers have made repeat purchases?
SELECT c.first_name, c.last_name, COUNT(s.sale_id) AS number_of_purchases
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_id
HAVING number_of_purchases > 1;

-- What is the total sales amount for each product category?
SELECT p.category, SUM(si.quantity * si.price_at_sale) AS category_sales
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.category
ORDER BY category_sales DESC;

-- Which product had the highest average sale price?
SELECT p.product_name, AVG(si.price_at_sale) AS average_sale_price
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.product_name
ORDER BY average_sale_price DESC;

 -- What are the total units sold for each product in each city?
 SELECT c.city, p.product_name, SUM(si.quantity) AS units_sold
FROM sales_items si
JOIN sales s ON si.sale_id = s.sale_id
JOIN customers c ON s.customer_id = c.customer_id
JOIN products p ON si.product_id = p.product_id
GROUP BY c.city, p.product_name
ORDER BY c.city, units_sold DESC;

-- How many customers joined each month?
SELECT MONTH(join_date) AS month, COUNT(customer_id) AS customers_joined
FROM customers
GROUP BY month
ORDER BY month;

create database sales;
use sales;
create table Customers (customer_id INT primary key , first_name VARCHAR(50) , last_name VARCHAR(50) , email VARCHAR(50), phone_nunmber VARCHAR(50)
, address text , city VARCHAR(50), state VARCHAR(50) , zip_code varchar(50), join_date date );
create table products ( product_id int , product_name VARCHAR(100) , category VARCHAR(100) , price decimal (10,2) , stock_quantity int,
supplier_id int );
CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    sale_date DATE,
    total_amount DECIMAL(10, 2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
CREATE TABLE Sales_Items  (sale_item_id	INT,sale_id	INT, product_id	INT,quantity	INT,price_at_sale	DECIMAL(10, 2));
create table Suppliers ( supplier_id	INT primary key , supplier_name	VARCHAR(100) , contact_name	VARCHAR(100), phone_number	VARCHAR(20),
email	VARCHAR(100), address	TEXT,city	VARCHAR(50),state	VARCHAR(50),zip_code	VARCHAR(10));
CREATE TABLE Inventory (
    inventory_id INT PRIMARY KEY,
    product_id INT,
    quantity INT,
    last_updated DATE);
INSERT INTO customers (customer_id, first_name, last_name, email, phone_nunmber, address, city, state, zip_code, join_date)
VALUES 
(1, 'John', 'Doe', 'johndoe@example.com', '123-456-7890', '123 Main St', 'New York', 'NY', '10001', '2023-01-10'),
(2, 'Jane', 'Smith', 'janesmith@example.com', '987-654-3210', '456 Elm St', 'Los Angeles', 'CA', '90001', '2023-02-14'),
(3, 'Alice', 'Johnson', 'alicej@example.com', '555-555-5555', '789 Oak St', 'Chicago', 'IL', '60601', '2023-03-05'),
(4, 'Bob', 'Brown', 'bobb@example.com', '444-444-4444', '321 Pine St', 'Houston', 'TX', '77001', '2023-04-20');

INSERT INTO products (product_id, product_name, category, price, stock_quantity, supplier_id)
VALUES 
(1, 'Laptop', 'Electronics', 999.99, 50, 1),
(2, 'Smartphone', 'Electronics', 699.99, 100, 2),
(3, 'Desk Chair', 'Furniture', 89.99, 200, 3),
(4, 'Headphones', 'Electronics', 199.99, 150, 1);

INSERT INTO suppliers (supplier_id, supplier_name, contact_name, phone_number, email, address, city, state, zip_code)
VALUES 
(1, 'TechSupply Co.', 'Michael White', '222-333-4444', 'michael@techsupply.com', '987 Tech Ave', 'San Francisco', 'CA', '94105'),
(2, 'GadgetsRUs', 'Sara Black', '111-222-3333', 'sara@gadgetsrus.com', '654 Gadget Blvd', 'Austin', 'TX', '73301'),
(3, 'OfficeFurnishings', 'Tom Green', '888-999-0000', 'tom@officefurnishings.com', '321 Office St', 'Dallas', 'TX', '75201');

INSERT INTO sales (sale_id, sale_date, customer_id, total_amount)
VALUES 
(1, '2023-05-01', 1, 1299.98),
(2, '2023-05-02', 2, 89.99),
(3, '2023-05-03', 3, 1199.98),
(4, '2023-05-04', 4, 999.99);

INSERT INTO sales_items (sale_item_id, sale_id, product_id, quantity, price_at_sale)
VALUES 
(1, 1, 1, 1, 999.99),
(2, 1, 4, 1, 199.99),
(3, 2, 3, 1, 89.99),
(4, 3, 2, 2, 699.99),
(5, 4, 1, 1, 999.99);

INSERT INTO inventory (inventory_id, product_id, quantity, last_updated)
VALUES 
(1, 1, 49, '2023-05-01'),
(2, 2, 98, '2023-05-03'),
(3, 3, 199, '2023-05-02'),
(4, 4, 149, '2023-05-01');

-- What is the total revenue generated by each product?-- 
SELECT p.product_name, SUM(si.quantity * si.price_at_sale) AS total_revenue
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_revenue DESC;

-- Who are the top 3 customers by total spending?
SELECT c.first_name, c.last_name, SUM(s.total_amount) AS total_spend
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_id
ORDER BY total_spend DESC
LIMIT 3;

-- What is the average order value (AOV) across all sales?
SELECT AVG(total_amount) AS average_order_value
FROM sales;

-- How many units of each product have been sold?
SELECT p.product_name, SUM(si.quantity) AS units_sold
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.product_name
ORDER BY units_sold DESC;

-- What is the most popular product category?
SELECT p.category, SUM(si.quantity) AS units_sold
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.category
ORDER BY units_sold DESC;

-- What is the total revenue generated in each city?
SELECT c.city, SUM(s.total_amount) AS total_revenue
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.city
ORDER BY total_revenue DESC;

-- Which supplier provides the most products?
SELECT sp.supplier_name, COUNT(p.product_id) AS products_supplied
FROM suppliers sp
JOIN products p ON sp.supplier_id = p.supplier_id
GROUP BY sp.supplier_name
ORDER BY products_supplied DESC;

-- What is the inventory level of each product after all sales?
SELECT p.product_name, i.quantity AS current_stock
FROM inventory i
JOIN products p ON i.product_id = p.product_id;

 -- What is the percentage contribution of each product to the total sales revenue?
SELECT p.product_name, 
       SUM(si.quantity * si.price_at_sale) / (SELECT SUM(total_amount) FROM sales) * 100 AS revenue_percentage
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.product_name
ORDER BY revenue_percentage DESC;

-- On which date was the highest revenue generated?
SELECT sale_date, SUM(total_amount) AS daily_revenue
FROM sales
GROUP BY sale_date
ORDER BY daily_revenue DESC
LIMIT 1;

-- How many customers have made repeat purchases?
SELECT c.first_name, c.last_name, COUNT(s.sale_id) AS number_of_purchases
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_id
HAVING number_of_purchases > 1;

-- What is the total sales amount for each product category?
SELECT p.category, SUM(si.quantity * si.price_at_sale) AS category_sales
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.category
ORDER BY category_sales DESC;

-- Which product had the highest average sale price?
SELECT p.product_name, AVG(si.price_at_sale) AS average_sale_price
FROM sales_items si
JOIN products p ON si.product_id = p.product_id
GROUP BY p.product_name
ORDER BY average_sale_price DESC;

 -- What are the total units sold for each product in each city?
 SELECT c.city, p.product_name, SUM(si.quantity) AS units_sold
FROM sales_items si
JOIN sales s ON si.sale_id = s.sale_id
JOIN customers c ON s.customer_id = c.customer_id
JOIN products p ON si.product_id = p.product_id
GROUP BY c.city, p.product_name
ORDER BY c.city, units_sold DESC;

-- How many customers joined each month?
SELECT MONTH(join_date) AS month, COUNT(customer_id) AS customers_joined
FROM customers
GROUP BY month
ORDER BY month;

v
